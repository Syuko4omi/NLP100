基本的な正規表現の練習-> https://doc.mas3.net/regexp/
正規表現のいろは-> https://qiita.com/FukuharaYohei/items/459f27f0d7bbba551af7


20
*複数のjson形式の情報が格納されているので、json.load()を使おうとするとうまくいかない。
・json形式の情報をpythonの辞書型に直すには、jsonモジュールのJSONDecoder()を用いて、decoder = json.JSONDecoder()というクラスを用意した後でdecoder.decode(JSON形式のデータ)としてあげる。


21,22
正規表現を使うときはimport reとする。
見つけ出したいパターンをre.compile(なんかの正規表現)として定義。
例えば、pat = re.compile('^\[\[Category:.*\]\]$', re.MULTILINE)とすると、[[Category:ほげ]]というパターンを定義したことになる。（MULTILINEとすると、^が「行頭」から「改行を考慮した上での行頭」になり、$も「行末」から「改行手前のすべての行末」と意味が変わる。）

パターンを登録したら、pat.findall(テキスト)とするとテキスト中のpatに該当するパターンを探して、リストにして返してくれる。
パターンを登録する際に、見つける部分を丸括弧で囲ってあげると、その部分だけが取り出せる。例えば、pat = re.compile('^\[\[Category:(.*)\]\]$', re.MULTILINE)とすれば、[[Category:ほげ]]の「ほげ」のみを探してくれる。

また、raw string表現というのがあり、正規表現のクオーテーションの前にrをつけることで、「Python文字列としての」エスケープシーケンスが必要なくなる。しかし今回の場合、[]というカッコは集合を表現する正規表現(例えば[1-3]は1,2,3のうちの1つを表す)になってしまうので、raw string表現であっても「正規表現としての」エスケープシーケンスを残してあげる必要がある。

＜重要＞:pythonの正規表現（例えばre.compileの第一引数や、findallの第一引数など）だと、raw stringとそうでないものの違いは、「受け渡すときの表現」のみであり、解釈によっては同じものを表現することがある。
例えば、
(a) pat = re.compile("^\[\[Hoge:\\n.*\'\]\]$", re.MULTILINE)
(b) pat = re.compile(r"^\[\[Hoge:\n.*'\]\]$", re.MULTILINE)
の違いはない。
(a)は、「Python文字列」のエスケープシーケンスがシングルクオーテーションの前に必要になり、改行を表す"\n"も、その一部であるバックスラッシュを認識させるためのエスケープシーケンスが必要になるが、(b)ではraw string表現なので必要ない。一方、(a)、(b)ともに[]は範囲ではなく文字列を表現するので、それぞれ「正規表現の」エスケープシーケンスが必要になる。
要するに、raw string表現をすると、pythonの記法で必要なエスケープシーケンスが必要なくなり、正規表現のエスケープシーケンスだけを考えれば良いということになる。

*Pythonの文字列における主なエスケープシーケンス：バックスラッシュ、クオーテーションマークなど
*正規表現における主なエスケープシーケンス：カッコ、アスタリスク、クエスチョンマーク、ドル($)など



23
後方参照を使う時は、例えば pat = re.compile(r"(={2,})(.*)\1", re.MULTILINE)のようにraw string表現が必要（Pythonだとバックスラッシュ+数字が別の形で解釈されてしまうため、そのままの形で正規表現の解釈に受け渡してあげる必要がある。）



25,26,27
・DOTALL
ピリオド(.)はなんでもいいから一文字を表現していたが、これに加えてさらに改行を含めることができる。複数のオプションを指定するには re.MULTILINE + re.DOTALL とする。

・キャプチャ対象外、肯定の先読み
(?: 正規表現)とすると、正規表現の部分はキャプチャの対象外となる（つまりカッコで括ったパターンであってその中身を取ってこない）。これは先読みをする時に便利である。先読みでは、「このパターンが後に続いたら採用」ということができる。ただ、後のパターンは関係なくその前のパターンをキャプチャしたいというときは、そのパターンを(?= 正規表現)という形で括ると良い。
例えば、改行の直後に|が来るようなパターンをキャプチャしたい場合、(?:(?=\n\|))と書ける。

・非貪欲マッチ
例えば、「何か文字が続いた後に"|"がくるパターン」を何も考えずに書くとr".*\|"となりそうだが、これだと"|"もワイルドカードに含まれるので、意図した挙動と違う挙動をしてしまう。望んだ通りの結果を得るためには、正規表現にマッチする文字列の中で「最も短い長さ」でマッチさせるべきであり、これは非貪欲マッチと呼ぶ。被貪欲マッチにするには、*,+,?の直後に?を追加する。
# 貪欲マッチ
>>> print(re.findall(r'.0.*2',  'A0123 B0123'))
['A0123 B012']

# 非貪欲マッチ(*の後に?)
>>> print(re.findall(r'.0.*?2', 'A0123 B0123'))
['A012', 'B012']

先ほどの例では、".*\|"ではなく、".*?\|"と書くべきである。


・文字の置換
re.sub(置換前の正規表現, 置換後の正規表現, 置換する部分が入った元の文字列)で変換可能。返り値がほしい値になっている。
re.sub("\[\[([^|]*?\|)??([^|]*?)\]\]", r"\2", temp)として、置換前の正規表現を複数のグループで囲って、その何番目かのグループを後方参照で置換後の正規表現に与えることもできる。


29
https://www.mediawiki.org/wiki/API:Imageinfoの例に加え、パラメータでiiprop:urlを指定してurlの情報を取得し、それを表示する。
